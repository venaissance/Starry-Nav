{"version":3,"sources":["main.js"],"names":["x","localStorage","getItem","xObject","JSON","parse","hashMap","url","logo","render","$","find","remove","forEach","item","index","$li","simplifyUrl","insertBefore","on","window","location","href","e","stopPropagation","console","log","splice","replace","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.5cb36edc.js","sourceRoot":"../src","sourcesContent":["// 从localStorage里取出hashMap，这样就实现了即使离开页面之后原先数据的保存\nconst x = localStorage.getItem(\"x\");\nconst xObject = JSON.parse(x); // 字符串转对象\n\n// 初始状态xObject为null\nconst hashMap = xObject || [\n  { url: \"https://www.acfun.cn\", logo: \"A\" },\n  { url: \"https://www.bilibili.com\", logo: \"B\" },\n  { url: \"https://dig.chouti.com\", logo: \"C\" }\n];\n\n// 每次添加新页面的过程也就是渲染hashMap的过程\nconst render = () => {\n  // 先把上一次的数据移除，再遍历\n  $(\".siteList\")\n    .find(\"li:not(.last)\")\n    .remove();\n  // 对象遍历\n  hashMap.forEach((item, index) => {\n    const $li = $(`<li>\n                <div class=\"site\">\n                    <div class=\"logo\">${item.logo}</div>\n                    <div class=\"link\">${simplifyUrl(item.url)}</div>\n                    <div class=\"remove\">\n                        <svg class=\"icon\">\n                            <use xlink:href=\"#icon-remove\"></use>\n                        </svg>\n                    </div>\n                </div>\n        </li>`).insertBefore($(\".last\"));\n    $li.on(\"click\", () => {\n      //   window.open(item.url); // 新页面打开\n      window.location.href = item.url; // 本页面重定向，比上面的方法好，没有函数调用开销\n    });\n    $li.on(\"click\", \".remove\", e => {\n      e.stopPropagation(); // 阻止事件冒泡（不听爸爸的监听事件）\n      console.log(hashMap[index]);\n      hashMap.splice(index, 1); // 数组中删除\n      render(); // 重新渲染\n    });\n  });\n};\n\nconst simplifyUrl = url => {\n  return url\n    .replace(\"https://\", \"\")\n    .replace(\"http://\", \"\")\n    .replace(\"www.\", \"\")\n    .replace(/\\/.*/, \"\") // 删除url里 / 后面的内容，解决过长url的显示bug\n    .replace(\n      /[\\ |\\~|\\`|\\!|\\@|\\#|\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\||\\\\|\\[|\\]|\\{|\\}|\\;|\\\"|\\'|\\,|\\<|\\>|\\/|\\?]/g,\n      \"\"\n    ); // 去除url中的无用标点（:和.除外)\n};\n\nrender();\n\n$(\".addButton\").on(\"click\", () => {\n  // 页面弹框输入\n  let url = window.prompt(\"请问你要添加什么网址呢？\");\n\n  if (url.indexOf(\"http\") !== 0) {\n    url = \"https://\" + url;\n  }\n  // hashMap里加入新的url，再渲染\n  hashMap.push({\n    logo: simplifyUrl(url)[0].toUpperCase(),\n    url: url\n  });\n  render();\n});\n\n// 窗口即将被关闭时触发，把hashMap保存到localStorage里\nwindow.onbeforeunload = () => {\n  const string = JSON.stringify(hashMap); // 对象转字符串\n  localStorage.setItem(\"x\", string); // localStorage.setItem(key, value)\n};\n\n// 键盘\n$(document).on(\"keypress\", e => {\n  const { key } = e; // 等同于const key = e.key\n  for (let i = 0; i < hashMap.length; i++) {\n    if (hashMap[i].logo.toLowerCase() === key) {\n      window.location.href = hashMap[i].url;\n    }\n  }\n});\n"]}